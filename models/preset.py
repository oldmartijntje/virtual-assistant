from shared.logger import logger
import handlers.textHandler as textHandler

defaultPresetData = {
    "loop": 0,
    "commands": {},
    "exitCommands": [
        "print -txt \"Goodby!\""
    ],
    "settings": {
        "activeEffects": [],
        "autoSave": False,
        "editWithoutPassword": True,

    },
    "memory": {},
    "effects": {
        "testing": {
            "commands": {
                "beforeText": ["print beforeText", "print beforeText2"],
                "afterText": ["print afterText", "print afterText2"],
            },
            "text": {
                "beforeText": "beforeText",
                "afterText": "afterText",
            },
            "replaceText": {
                "1": "2",
                "a": "-MEOW-",
            },
            "runTextInCommands": ["print \"meow - {}\""],
            "feedback": True
        },
    },
    "metaData": {
        "name": "Default",
        "author": "OldMartijntje",
        "version": "1.0.0",
        "description": "Default preset."
    },
    "self": {
        "nick": "user",
        "presetName": "Default",
        "Id": "00000000-0000-0000-0000-000000000000",
        "nameHistory": []
    }
}
# only the last effect in the list will be checked for "feedback": False

class Preset:
    """
    A brief description of what the class does.
    """
    import uuid
    
    def __init__(self, nickname="user", presetName="Default", presetID=str(uuid.uuid4()), presetData=defaultPresetData):
        self.nick = nickname
        self.presetName = presetName
        self.Id = presetID
        self.data = presetData
        self.data["self"]["nick"] = self.nick
        self.data["self"]["presetName"] = self.presetName
        self.data["self"]["Id"] = self.Id
        self.data["self"]["nameHistory"] = [self.presetName]
        
        logger.debug(f'created Preset: {self.presetName} with ID: {self.Id} and nickname: {self.nick}')
    
    def method1(self, arg3):
        """
        A brief description of what method1 does.

        :param arg3: A description of the third argument.
        :return: A description of what the method returns.
        """
        # implementation here
    
    def method2(self):
        """
        A brief description of what method2 does.

        :return: A description of what the method returns.
        """
        # implementation here

    def savePresetToFile(self):
        global handler
        import setup
        self.data["self"]["presetName"] = self.presetName
        handler.changePresetName(self.Id, self.presetName, self.data["self"]["nameHistory"][0])
        self.data["self"]["nameHistory"] = [self.presetName]
        setup.createJsonIfNotExists(f"configuration/presetData/preset{self.Id}.json", self.data, True)
        logger.info(f'saved {self.Id} preset to file')

class PresetHandler:
    def __init__(self, data={}):
        self.data = data
        self.storage = "configuration/presetData/presetHandler.json"
        
        logger.debug(f'created PresetHandler')
    
    def importData(self):
        import setup
        self.data = setup.readJson(self.storage)
        logger.debug(f'imported data from: {self.storage}')
        settings = setup.readJson("configuration/settings.json")
        if settings["preferences"]["anonymous"] == True:
            settings["preferences"]["username"] = "Anonymous"
        if self.data == {} or self.data == False:
            logger.debug(f'imported data was empty, creating default data')
            self.data = {
                "presetNames": {},
                "packages": {},
                "metaData": {
                    "name": "PresetHandler",
                    "author": settings["preferences"]["username"],
                    "version": "1.0.0",
                    "description": "The Autogenerated Default presetHandler."
                },
            }
            self.exportData()
    
    def exportData(self):
        import setup
        setup.createJsonIfNotExists(self.storage, self.data, True)
        logger.debug(f'exported data to: {self.storage}')

    def getPresetsByName(self, name = ""):
        logger.debug(f'getPresetsByName called w name: "{name}"')
        if name == "":
            return self.data["presetNames"]
        return self.data["presetNames"][name]
    
    def getMetaDataById(self, presetId):
        import setup
        logger.debug(f'getPresetMetaData called w presetId: "{presetId}"')
        if presetId in self.data["packages"]:
            return self.data["packages"][presetId]["metaData"]
        else:
            return setup.readJson(f"configuration/presetData/{presetId}.json")["metaData"]
    
    def getPresetById(self, presetId):
        import setup
        logger.debug(f'getPresetById called w presetId: "{presetId}"')
        return setup.readJson(f"configuration/presetData/{presetId}.json")
    
    def changePresetName(self, presetId, newName, oldName):
        logger.debug(f'changePresetName called w presetId: "{presetId}", newName: "{newName}", oldName: "{oldName}"')
        if newName == oldName:
            return
        if newName in self.data["presetNames"]:
            self.data["presetNames"][newName].append(presetId)
        else:
            self.data["presetNames"][newName] = [presetId]
        if oldName in self.data["presetNames"] and presetId in self.data["presetNames"][oldName]:
            self.data["presetNames"][oldName].remove(presetId)
        if oldName in self.data["presetNames"] and len(self.data["presetNames"][oldName]) == 0:
            del self.data["presetNames"][oldName]
        self.exportData()


currentPreset = Preset()
handler = PresetHandler()
handler.importData()

def getPreset():
    global currentPreset
    logger.debug(f'getPreset called, returning: {currentPreset.presetName}')
    return currentPreset.presetName

def savePreset(chatEffect, feedback=True):
    global currentPreset
    currentPreset.savePresetToFile()
    textHandler.textController(f"Preset save placeholder", chatEffect=chatEffect, feedback=feedback)

def loadPreset(presetName, chatEffect, feedback=True):
    textHandler.textController(f"Preset load placeholder", chatEffect=chatEffect, feedback=feedback)

def setName(name, chatEffect, feedback=True):
    global currentPreset
    currentPreset.presetName = name
    logger.info(f'Preset name set to: {currentPreset.presetName}')
    textHandler.textController(f"Preset name set to: {currentPreset.presetName}", chatEffect=chatEffect, feedback=feedback)
    return currentPreset.presetName

def getCommands():
    logger.debug(f'getCommands called of preset: {currentPreset.presetName}')
    commands = currentPreset.data["commands"]
    return commands

def getPresetData():
    logger.debug(f'getPresetData called')
    return currentPreset.data

def setPresetData(data):
    currentPreset.data = data
    logger.debug(f'setPresetData called')
    return True

def debug():
    logger.debug(f'preset debug called')
    return True